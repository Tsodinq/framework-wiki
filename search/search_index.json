{"config":{"indexing":"full","lang":["en","fr","nl"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Framework Wiki Welcome to the Framework Wiki! This is a collection of documentation for Framework and its related projects, like Soodam.re Cloud and more. This wiki is a work in progress, and will be updated as new features are added to Framework. What is Framework? Framework is a free (as in freedom and as in free beer), open-source, federated and decentralized Roblox alternative. We aim to provide a safe, secure, and fun environment for all users by providing a platform that is free of censorship and mass moderation. Our target audience is people concerned about their privacy and security, and people who want to be able to express themselves freely without fear of being banned or censored. Framework provides many features that are not available on Roblox, such as: A federated network of servers, allowing you to connect to any server you want and reduces reliance on a single, corporate-owned server. A decentralized moderation system, allowing you to moderate your own server and decide who gets banned and who doesn't that can be easily replicated across other servers. The ability to self-host your own server, enabling many more possibilities for customization, control, and even performance. A community-first approach, where the community is in control of the direction of the project and the features that are added rather than investors or numbers on spreadsheets. A focus on privacy and security, with end-to-end encryption implemented in many places and a focus on making sure that your data is safe and secure from prying eyes. (We're GDPR compliant, and do not comply with Five-Eyes surveillance requests.) A focus on user experience, with a clean and simple interface that is easy to use and understand. ...and many, many more! Joining Framework Currently, Framework is in a closed alpha testing phase. If you'd like to join, come visit our Discord server and contact a staff member. We'll be happy to help you get started! Contributing Framework is fully open-source, and we welcome contributions from the community. If you'd like to contribute, head over to our GitHub repository and submit a pull request. We'll review it and get back to you as soon as possible. License Framework is licensed under the MIT License . You can find the full license text in the LICENSE file in the repository. Made with <3 by Soodam.re and contributors.","title":"Home"},{"location":"#framework-wiki","text":"Welcome to the Framework Wiki! This is a collection of documentation for Framework and its related projects, like Soodam.re Cloud and more. This wiki is a work in progress, and will be updated as new features are added to Framework.","title":"Framework Wiki"},{"location":"#what-is-framework","text":"Framework is a free (as in freedom and as in free beer), open-source, federated and decentralized Roblox alternative. We aim to provide a safe, secure, and fun environment for all users by providing a platform that is free of censorship and mass moderation. Our target audience is people concerned about their privacy and security, and people who want to be able to express themselves freely without fear of being banned or censored. Framework provides many features that are not available on Roblox, such as: A federated network of servers, allowing you to connect to any server you want and reduces reliance on a single, corporate-owned server. A decentralized moderation system, allowing you to moderate your own server and decide who gets banned and who doesn't that can be easily replicated across other servers. The ability to self-host your own server, enabling many more possibilities for customization, control, and even performance. A community-first approach, where the community is in control of the direction of the project and the features that are added rather than investors or numbers on spreadsheets. A focus on privacy and security, with end-to-end encryption implemented in many places and a focus on making sure that your data is safe and secure from prying eyes. (We're GDPR compliant, and do not comply with Five-Eyes surveillance requests.) A focus on user experience, with a clean and simple interface that is easy to use and understand. ...and many, many more!","title":"What is Framework?"},{"location":"#joining-framework","text":"Currently, Framework is in a closed alpha testing phase. If you'd like to join, come visit our Discord server and contact a staff member. We'll be happy to help you get started!","title":"Joining Framework"},{"location":"#contributing","text":"Framework is fully open-source, and we welcome contributions from the community. If you'd like to contribute, head over to our GitHub repository and submit a pull request. We'll review it and get back to you as soon as possible.","title":"Contributing"},{"location":"#license","text":"Framework is licensed under the MIT License . You can find the full license text in the LICENSE file in the repository. Made with <3 by Soodam.re and contributors.","title":"License"},{"location":"branding/","text":"Our branding guidelines are designed to help you use the Framework logo and other Soodam.re trademarks in a way that is consistent with the Framework brand and that protects the Framework trademarks. We have pretty straightforward guidelines. So simple in fact, that we can fit it all in a list: Usage of Framework branding must be within fair use. You may not use the Framework logo or other Framework trademarks in a way that is likely to cause confusion about the source or ownership of the Framework brand. We don't want to jeopardize our brand by letting people think that Framework is associated with a company or organization that it is not. You may not use the Framework logo or other Framework trademarks in a way that implies that Framework endorses you or your products if it does not. That's about it. Legal stuff out of the way, here are some resources you can use to help you get started: Figma Project - A Figma project containing the Framework logo and other assets, including the Framework logo in various formats and colors. Logo Logo with Text Downloads Logo White Background SVG Logo Dark Background SVG Logo Transparent SVG Logo Text Transparent SVG Logo Text Dark SVG Logo Text White SVG Logo Text White Soodam.re SVG Logo Text Dark Soodam.re SVG Logo Text Transparent Soodam.re SVG","title":"Framework Branding"},{"location":"branding/#logo","text":"","title":"Logo"},{"location":"branding/#logo-with-text","text":"","title":"Logo with Text"},{"location":"branding/#downloads","text":"Logo White Background SVG Logo Dark Background SVG Logo Transparent SVG Logo Text Transparent SVG Logo Text Dark SVG Logo Text White SVG Logo Text White Soodam.re SVG Logo Text Dark Soodam.re SVG Logo Text Transparent Soodam.re SVG","title":"Downloads"},{"location":"cosmic-server/introduction/","text":"Cosmic Cosmic is a self-hosted server for games on Framework. It is written in TypeScript and is built on the following technologies: TypeScript - A superset of JavaScript that adds static typing and other features. Node.js - A JavaScript runtime that allows you to run JavaScript outside of a browser. Express - A framework for building web applications in Node.js. Socket.io - A library for real-time, bidirectional, and event-based communication between the server and the client. Getting Started Prerequisites You will need the following things installed on your computer: Node.js Yarn Git Installation Retrieve the source code from GitHub: git clone https://github.com/Tsodinq/cosmic.git This'll create a new directory called cosmic in your current directory. You can change this by adding a path to the end of the command, like so: git clone https://github.com/Tsodinq/cosmic.git my-project Install the dependencies: cd cosmic # or whatever you named the directory yarn install # you will need to install yarn using npm if you don't have it already - use `npm install -g yarn` Configure the server: You'll need a Nucleus API key to enable the server to communicate with the Nucleus API. To get a key, you will need to create a Connection on Framework. You can do this here . Once you've created a connection, head to Invent -> Nucleus and copy the corresponding API key for the connection you created ( quick link ). Now, create a file called .env in the root of the project and add the following line to it: NUCLEUS_KEY=your-api-key-here Next, we're going to set up the database. Cosmic uses Prisma as an ORM. Cosmic uses PostgreSQL as its database, so you'll need to install that as well. Once you've installed PostgreSQL and retrieved your database credentials, paste this line into your .env and replace the values with your own: DATABASE_URL=postgresql://{username}:{password}@localhost:5432/cosmic Run the server: yarn build yarn start If everything went well, you should see this output: Good job! You've successfully set up Cosmic. You should see your server listed as Online on your games server list. Tips Closing the server To close the server, use the exit command in the integrated command prompt. This will close the server and run necessary exit tasks. If you close the server using Ctrl+C , problems may arise. Running the server in the background You can use a tool like PM2 to run the server in the background. This is useful if you want to close your terminal and have the server continue running, and have a simple way to manage the server, such as restarting it, viewing logs, etc. Set up Cosmic with pm2 by running the following command: pm2 start yarn --name \"cosmic\" --interpreter bash -- start Cosmic should now be running in the background. You can view the logs by running pm2 logs cosmic and restart the server by running pm2 restart cosmic .","title":"Introduction"},{"location":"cosmic-server/introduction/#cosmic","text":"Cosmic is a self-hosted server for games on Framework. It is written in TypeScript and is built on the following technologies: TypeScript - A superset of JavaScript that adds static typing and other features. Node.js - A JavaScript runtime that allows you to run JavaScript outside of a browser. Express - A framework for building web applications in Node.js. Socket.io - A library for real-time, bidirectional, and event-based communication between the server and the client.","title":"Cosmic"},{"location":"cosmic-server/introduction/#getting-started","text":"","title":"Getting Started"},{"location":"cosmic-server/introduction/#prerequisites","text":"You will need the following things installed on your computer: Node.js Yarn Git","title":"Prerequisites"},{"location":"cosmic-server/introduction/#installation","text":"Retrieve the source code from GitHub: git clone https://github.com/Tsodinq/cosmic.git This'll create a new directory called cosmic in your current directory. You can change this by adding a path to the end of the command, like so: git clone https://github.com/Tsodinq/cosmic.git my-project Install the dependencies: cd cosmic # or whatever you named the directory yarn install # you will need to install yarn using npm if you don't have it already - use `npm install -g yarn` Configure the server: You'll need a Nucleus API key to enable the server to communicate with the Nucleus API. To get a key, you will need to create a Connection on Framework. You can do this here . Once you've created a connection, head to Invent -> Nucleus and copy the corresponding API key for the connection you created ( quick link ). Now, create a file called .env in the root of the project and add the following line to it: NUCLEUS_KEY=your-api-key-here Next, we're going to set up the database. Cosmic uses Prisma as an ORM. Cosmic uses PostgreSQL as its database, so you'll need to install that as well. Once you've installed PostgreSQL and retrieved your database credentials, paste this line into your .env and replace the values with your own: DATABASE_URL=postgresql://{username}:{password}@localhost:5432/cosmic Run the server: yarn build yarn start If everything went well, you should see this output: Good job! You've successfully set up Cosmic. You should see your server listed as Online on your games server list.","title":"Installation"},{"location":"cosmic-server/introduction/#tips","text":"","title":"Tips"},{"location":"cosmic-server/introduction/#closing-the-server","text":"To close the server, use the exit command in the integrated command prompt. This will close the server and run necessary exit tasks. If you close the server using Ctrl+C , problems may arise.","title":"Closing the server"},{"location":"cosmic-server/introduction/#running-the-server-in-the-background","text":"You can use a tool like PM2 to run the server in the background. This is useful if you want to close your terminal and have the server continue running, and have a simple way to manage the server, such as restarting it, viewing logs, etc. Set up Cosmic with pm2 by running the following command: pm2 start yarn --name \"cosmic\" --interpreter bash -- start Cosmic should now be running in the background. You can view the logs by running pm2 logs cosmic and restart the server by running pm2 restart cosmic .","title":"Running the server in the background"},{"location":"cosmic-server/typescript-api/datastores/","text":"Datastores Datastores are the storage backends for Cosmic servers. Datastores exist on the Framework API, and are used to store and retrieve data for use in your game. API rate limits are enforced on datastores. If you exceed the rate limit, your requests will be throttled. Rate Limits Datastores.setAsync is limited to 150 requests per minute. This limit is shared across all datastores as requests are tied to the origin of the request. Datastores.getAsync is limited to 150 requests per minute. This limit is shared across all datastores as requests are tied to the origin of the request. To get started, create a datastore for your game on the Framework website: Go to the Invent page Find the game you'd like to create a datastore for (and has a Cosmic server configured for) Click on the triple-dots and click Edit Go to the Datastores tab Click Create a new datastore and fill out the necessary fields Once your datastore is created, copy it's ID (shown below) Once you've retrieved your datastores ID, we can get started with the code. Create a new script in your Cosmic project. We'll name ours data.ts . Datastores.setAsync Definition setAsync : ( storeId : string , key : string , value : object ) => Promise < boolean > ; The setAsync function allows you to store a value in a specified datastore identified by its storeId . The key argument is used to uniquely identify the value within the datastore, and the value argument is the data you want to store. The function returns a promise that resolves to a boolean indicating whether the value was successfully set in the datastore. If an entry does not exist with the specified key , one will be created. Usage To use the setAsync function, pass it a string storeId representing the ID of the datastore you want to manipulate, a string key that uniquely identifies the value within the datastore, and an value object representing the data you want to store. The function will return a promise that resolves to a boolean indicating whether the value was successfully set in the datastore. // This will set user-123's coins to 500 and then // write to the console after it finishes. Datastores . setAsync ( \"myStore\" , \"user123\" , { name : \"John\" , age : 30 , }). then (() => { console . log ( \"Set user\" ); }); Datastores.getAsync Definition getAsync < T > ( storeId : string , key : string ) : Promise < { id : string ; key : string ; value : T ; gameDatastoreId : string ; } > ; The getAsync function retrieves a value from a specified datastore identified by its storeId . The key argument is used to uniquely identify the value within the datastore. The function returns a promise that resolves to an object containing the following properties: id : a string representing the ID of the value within the datastore key : a string representing the key used to retrieve the value value : the data stored in the datastore, of type T gameDatastoreId : a string representing the ID of the datastore Usage To use the getAsync function, pass it a string storeId representing the ID of the datastore you want to retrieve a value from, and a string key representing the unique key used to identify the value within the datastore. The function will return a promise that resolves to an object containing the ID, key, value, and datastore ID of the retrieved value. Datastores . getAsync < { name : string ; age : number ; } > ( \"myStore\" , \"user123\" ). then (( result ) => { console . log ( result ); // Output: // { // id: '123', // key: 'user123', // value: { // name: 'John', // age: 30 // }, // gameDatastoreId: 'myStore' // } });","title":"Datastores"},{"location":"cosmic-server/typescript-api/datastores/#datastores","text":"Datastores are the storage backends for Cosmic servers. Datastores exist on the Framework API, and are used to store and retrieve data for use in your game. API rate limits are enforced on datastores. If you exceed the rate limit, your requests will be throttled.","title":"Datastores"},{"location":"cosmic-server/typescript-api/datastores/#rate-limits","text":"Datastores.setAsync is limited to 150 requests per minute. This limit is shared across all datastores as requests are tied to the origin of the request. Datastores.getAsync is limited to 150 requests per minute. This limit is shared across all datastores as requests are tied to the origin of the request. To get started, create a datastore for your game on the Framework website: Go to the Invent page Find the game you'd like to create a datastore for (and has a Cosmic server configured for) Click on the triple-dots and click Edit Go to the Datastores tab Click Create a new datastore and fill out the necessary fields Once your datastore is created, copy it's ID (shown below) Once you've retrieved your datastores ID, we can get started with the code. Create a new script in your Cosmic project. We'll name ours data.ts .","title":"Rate Limits"},{"location":"cosmic-server/typescript-api/datastores/#datastoressetasync","text":"","title":"Datastores.setAsync"},{"location":"cosmic-server/typescript-api/datastores/#definition","text":"setAsync : ( storeId : string , key : string , value : object ) => Promise < boolean > ; The setAsync function allows you to store a value in a specified datastore identified by its storeId . The key argument is used to uniquely identify the value within the datastore, and the value argument is the data you want to store. The function returns a promise that resolves to a boolean indicating whether the value was successfully set in the datastore. If an entry does not exist with the specified key , one will be created.","title":"Definition"},{"location":"cosmic-server/typescript-api/datastores/#usage","text":"To use the setAsync function, pass it a string storeId representing the ID of the datastore you want to manipulate, a string key that uniquely identifies the value within the datastore, and an value object representing the data you want to store. The function will return a promise that resolves to a boolean indicating whether the value was successfully set in the datastore. // This will set user-123's coins to 500 and then // write to the console after it finishes. Datastores . setAsync ( \"myStore\" , \"user123\" , { name : \"John\" , age : 30 , }). then (() => { console . log ( \"Set user\" ); });","title":"Usage"},{"location":"cosmic-server/typescript-api/datastores/#datastoresgetasync","text":"","title":"Datastores.getAsync"},{"location":"cosmic-server/typescript-api/datastores/#definition_1","text":"getAsync < T > ( storeId : string , key : string ) : Promise < { id : string ; key : string ; value : T ; gameDatastoreId : string ; } > ; The getAsync function retrieves a value from a specified datastore identified by its storeId . The key argument is used to uniquely identify the value within the datastore. The function returns a promise that resolves to an object containing the following properties: id : a string representing the ID of the value within the datastore key : a string representing the key used to retrieve the value value : the data stored in the datastore, of type T gameDatastoreId : a string representing the ID of the datastore","title":"Definition"},{"location":"cosmic-server/typescript-api/datastores/#usage_1","text":"To use the getAsync function, pass it a string storeId representing the ID of the datastore you want to retrieve a value from, and a string key representing the unique key used to identify the value within the datastore. The function will return a promise that resolves to an object containing the ID, key, value, and datastore ID of the retrieved value. Datastores . getAsync < { name : string ; age : number ; } > ( \"myStore\" , \"user123\" ). then (( result ) => { console . log ( result ); // Output: // { // id: '123', // key: 'user123', // value: { // name: 'John', // age: 30 // }, // gameDatastoreId: 'myStore' // } });","title":"Usage"},{"location":"cosmic-server/typescript-api/using-typescript-in-cosmic/","text":"Using TypeScript in Cosmic Cosmic is written in TypeScript and we encourage you to use TypeScript in your Cosmic projects. This guide will help you get started. Getting Started If you were able to get your Cosmic server up and running, you should already have everything you need to build your game in TypeScript. All game scripts are stored in the src/scripts directory. Cosmic, by default recursively iterates through directories and files in the src/scripts directory and loads them as game scripts. This means that you can organize your scripts however you'd like. Learning TypeScript TypeScript is a superset of JavaScript that adds static typing and other useful features. If you're new to TypeScript, we recommend reading the TypeScript Handbook to learn the basics. If you're already familiar with JavaScript, learning TypeScript will be a breeze. The TypeScript Handbook is a great resource for learning the differences between JavaScript and TypeScript. Writing Scripts We recommend using Visual Studio Code for programming in TypeScript as it has great support for the TypeScript/JavaScript ecosystem. VSCode also comes with many useful extensions and built-in features that will make your life easier, such as: ESLint - Linting Prettier - Code formatting Intellisense - Code completion ...and on and on Example Script Let's start by creating a simple script that will log a message to the console when a player connects to the server. src/scripts/events.ts Game . on ( \"playerConnected\" , async ( player : Types.Player ) => { // (1) console . log ( `Player ${ player . username } connected!` ); // (2) }); The Game.on method is used to register an event handler. The first argument is the name of the event, and the second argument is the event handler function. Event names are typed, so you can use the Game.on method to discover all available events. The console.log method is used to log a message to the console. The console object is a global object that is available in all scripts. Here, we print the name of the player that connected. Linting Cosmic's source code is linted using ESLint . You can extend our configuration in the .eslintrc.json file in the root of your Cosmic server directory. Learn more about configuring ESLint .","title":"Using TypeScript in Cosmic"},{"location":"cosmic-server/typescript-api/using-typescript-in-cosmic/#using-typescript-in-cosmic","text":"Cosmic is written in TypeScript and we encourage you to use TypeScript in your Cosmic projects. This guide will help you get started.","title":"Using TypeScript in Cosmic"},{"location":"cosmic-server/typescript-api/using-typescript-in-cosmic/#getting-started","text":"If you were able to get your Cosmic server up and running, you should already have everything you need to build your game in TypeScript. All game scripts are stored in the src/scripts directory. Cosmic, by default recursively iterates through directories and files in the src/scripts directory and loads them as game scripts. This means that you can organize your scripts however you'd like.","title":"Getting Started"},{"location":"cosmic-server/typescript-api/using-typescript-in-cosmic/#learning-typescript","text":"TypeScript is a superset of JavaScript that adds static typing and other useful features. If you're new to TypeScript, we recommend reading the TypeScript Handbook to learn the basics. If you're already familiar with JavaScript, learning TypeScript will be a breeze. The TypeScript Handbook is a great resource for learning the differences between JavaScript and TypeScript.","title":"Learning TypeScript"},{"location":"cosmic-server/typescript-api/using-typescript-in-cosmic/#writing-scripts","text":"We recommend using Visual Studio Code for programming in TypeScript as it has great support for the TypeScript/JavaScript ecosystem. VSCode also comes with many useful extensions and built-in features that will make your life easier, such as: ESLint - Linting Prettier - Code formatting Intellisense - Code completion ...and on and on","title":"Writing Scripts"},{"location":"cosmic-server/typescript-api/using-typescript-in-cosmic/#example-script","text":"Let's start by creating a simple script that will log a message to the console when a player connects to the server. src/scripts/events.ts Game . on ( \"playerConnected\" , async ( player : Types.Player ) => { // (1) console . log ( `Player ${ player . username } connected!` ); // (2) }); The Game.on method is used to register an event handler. The first argument is the name of the event, and the second argument is the event handler function. Event names are typed, so you can use the Game.on method to discover all available events. The console.log method is used to log a message to the console. The console object is a global object that is available in all scripts. Here, we print the name of the player that connected.","title":"Example Script"},{"location":"cosmic-server/typescript-api/using-typescript-in-cosmic/#linting","text":"Cosmic's source code is linted using ESLint . You can extend our configuration in the .eslintrc.json file in the root of your Cosmic server directory. Learn more about configuring ESLint .","title":"Linting"},{"location":"support/changing-your-email/","text":"To change your email on Framework, head to the Settings , go to the Security tab, and under the Email group and click Change email . You'll be prompted to enter your new email, and will be sent an email to verify your new email address.","title":"Changing your email address"},{"location":"support/resetting-your-password/","text":"To reset your password on Framework, head to the Settings , go to the Security tab, and under the Password group, click Change password . Note that you will need to know your current password to change it.","title":"Resetting your password"},{"location":"fr/","text":"Wiki du Framework Bienvenue dans le Wiki du Framework! C'est une collection de documentation pour Framework et ses projets li\u00e9s, comme Soodam.re Cloud et plus encore. Ce wiki est en cours d'\u00e9laboration et sera mis \u00e0 jour au fur et \u00e0 mesure que de nouvelles fonctionnalit\u00e9s seront ajout\u00e9es \u00e0 Framework. Qu'est-ce que Framework? Framework est une alternative gratuite (en termes de libert\u00e9 et de bi\u00e8re), open-source, f\u00e9d\u00e9r\u00e9e et d\u00e9centralis\u00e9e \u00e0 Roblox. Notre objectif est de fournir un environnement s\u00e9curis\u00e9 et amusant pour tous les utilisateurs en fournissant une plateforme libre de censure et de mod\u00e9ration massive. Notre public cible est constitu\u00e9 de personnes soucieuses de leur vie priv\u00e9e et de leur s\u00e9curit\u00e9, et de personnes souhaitant s'exprimer librement sans craindre d'\u00eatre bannies ou censur\u00e9es. Framework offre de nombreuses fonctionnalit\u00e9s qui ne sont pas disponibles sur Roblox, telles que: Un r\u00e9seau f\u00e9d\u00e9r\u00e9 de serveurs vous permettant de vous connecter \u00e0 n'importe quel serveur que vous voulez et r\u00e9duisant la d\u00e9pendance vis-\u00e0-vis d'un seul serveur d\u00e9tenu par une entreprise. Un syst\u00e8me de mod\u00e9ration d\u00e9centralis\u00e9 vous permettant de mod\u00e9rer votre propre serveur et de d\u00e9cider qui est banni et qui ne l'est pas, facilement reproductible sur d'autres serveurs. La possibilit\u00e9 de h\u00e9berger votre propre serveur, permettant de nombreuses possibilit\u00e9s de personnalisation, de contr\u00f4le et m\u00eame de performance. Une approche ax\u00e9e sur la communaut\u00e9, o\u00f9 la communaut\u00e9 est aux commandes de la direction du projet et des fonctionnalit\u00e9s ajout\u00e9es plut\u00f4t que les investisseurs ou les chiffres sur les tableurs. Une focus sur la vie priv\u00e9e et la s\u00e9curit\u00e9, avec un chiffrement de bout en bout mis en \u0153uvre dans de nombreux endroits et une attention particuli\u00e8re \u00e0 la protection de vos donn\u00e9es contre les regards indiscrets. (Nous sommes conformes au RGPD et nous ne satisfaisons pas les demandes de surveillance Five-Eyes.) Une focus sur l'exp\u00e9rience utilisateur, avec une interface simple et propre facile \u00e0 utiliser et \u00e0 comprendre. ... et beaucoup, beaucoup plus! Rejoindre Framework Actuellement, Framework est en phase de test alpha ferm\u00e9e. Si vous souhaitez vous joindre \u00e0 nous, rendez-vous sur notre serveur Discord et contactez un membre du personnel. Nous serons heureux de vous aider \u00e0 d\u00e9marrer! Contribuer Framework est enti\u00e8rement open-source et nous accueillons les contributions de la communaut\u00e9. Si vous souhaitez contribuer, rendez-vous sur notre d\u00e9p\u00f4t GitHub et soumettez une demande de tirage. Nous l'examinerons et vous r\u00e9pondrons d\u00e8s que possible. Licence Framework est sous licence MIT License . Vous pouvez trouver le texte complet de la licence dans le fichier LICENSE du d\u00e9p\u00f4t. R\u00e9alis\u00e9 avec <3 par Soodam.re et contributeurs.","title":"Home"},{"location":"fr/#wiki-du-framework","text":"Bienvenue dans le Wiki du Framework! C'est une collection de documentation pour Framework et ses projets li\u00e9s, comme Soodam.re Cloud et plus encore. Ce wiki est en cours d'\u00e9laboration et sera mis \u00e0 jour au fur et \u00e0 mesure que de nouvelles fonctionnalit\u00e9s seront ajout\u00e9es \u00e0 Framework.","title":"Wiki du Framework"},{"location":"fr/#quest-ce-que-framework","text":"Framework est une alternative gratuite (en termes de libert\u00e9 et de bi\u00e8re), open-source, f\u00e9d\u00e9r\u00e9e et d\u00e9centralis\u00e9e \u00e0 Roblox. Notre objectif est de fournir un environnement s\u00e9curis\u00e9 et amusant pour tous les utilisateurs en fournissant une plateforme libre de censure et de mod\u00e9ration massive. Notre public cible est constitu\u00e9 de personnes soucieuses de leur vie priv\u00e9e et de leur s\u00e9curit\u00e9, et de personnes souhaitant s'exprimer librement sans craindre d'\u00eatre bannies ou censur\u00e9es. Framework offre de nombreuses fonctionnalit\u00e9s qui ne sont pas disponibles sur Roblox, telles que: Un r\u00e9seau f\u00e9d\u00e9r\u00e9 de serveurs vous permettant de vous connecter \u00e0 n'importe quel serveur que vous voulez et r\u00e9duisant la d\u00e9pendance vis-\u00e0-vis d'un seul serveur d\u00e9tenu par une entreprise. Un syst\u00e8me de mod\u00e9ration d\u00e9centralis\u00e9 vous permettant de mod\u00e9rer votre propre serveur et de d\u00e9cider qui est banni et qui ne l'est pas, facilement reproductible sur d'autres serveurs. La possibilit\u00e9 de h\u00e9berger votre propre serveur, permettant de nombreuses possibilit\u00e9s de personnalisation, de contr\u00f4le et m\u00eame de performance. Une approche ax\u00e9e sur la communaut\u00e9, o\u00f9 la communaut\u00e9 est aux commandes de la direction du projet et des fonctionnalit\u00e9s ajout\u00e9es plut\u00f4t que les investisseurs ou les chiffres sur les tableurs. Une focus sur la vie priv\u00e9e et la s\u00e9curit\u00e9, avec un chiffrement de bout en bout mis en \u0153uvre dans de nombreux endroits et une attention particuli\u00e8re \u00e0 la protection de vos donn\u00e9es contre les regards indiscrets. (Nous sommes conformes au RGPD et nous ne satisfaisons pas les demandes de surveillance Five-Eyes.) Une focus sur l'exp\u00e9rience utilisateur, avec une interface simple et propre facile \u00e0 utiliser et \u00e0 comprendre. ... et beaucoup, beaucoup plus!","title":"Qu'est-ce que Framework?"},{"location":"fr/#rejoindre-framework","text":"Actuellement, Framework est en phase de test alpha ferm\u00e9e. Si vous souhaitez vous joindre \u00e0 nous, rendez-vous sur notre serveur Discord et contactez un membre du personnel. Nous serons heureux de vous aider \u00e0 d\u00e9marrer!","title":"Rejoindre Framework"},{"location":"fr/#contribuer","text":"Framework est enti\u00e8rement open-source et nous accueillons les contributions de la communaut\u00e9. Si vous souhaitez contribuer, rendez-vous sur notre d\u00e9p\u00f4t GitHub et soumettez une demande de tirage. Nous l'examinerons et vous r\u00e9pondrons d\u00e8s que possible.","title":"Contribuer"},{"location":"fr/#licence","text":"Framework est sous licence MIT License . Vous pouvez trouver le texte complet de la licence dans le fichier LICENSE du d\u00e9p\u00f4t. R\u00e9alis\u00e9 avec <3 par Soodam.re et contributeurs.","title":"Licence"},{"location":"fr/cosmic-server/introduction/","text":"Cosmic Cosmic est un serveur auto-h\u00e9berg\u00e9 pour les jeux sur Framework. Il est \u00e9crit en TypeScript et est construit avec les technologies suivantes : TypeScript - Un sur-ensemble de JavaScript qui ajoute des types statiques et d'autres fonctionnalit\u00e9s. Node.js - Un runtime JavaScript qui vous permet d'ex\u00e9cuter du JavaScript en dehors d'un navigateur. Express - Un cadre pour construire des applications web dans Node.js. Socket.io - Une biblioth\u00e8que pour la communication bidirectionnelle et bas\u00e9e sur des \u00e9v\u00e9nements en temps r\u00e9el entre le serveur et le client. D\u00e9marrage Pr\u00e9requis Vous aurez besoin des choses suivantes install\u00e9es sur votre ordinateur : Node.js Yarn Git Installation R\u00e9cup\u00e9rez le code source de GitHub : git clone https://github.com/Tsodinq/cosmic.git Cela cr\u00e9era un nouveau r\u00e9pertoire appel\u00e9 cosmic dans votre r\u00e9pertoire actuel. Vous pouvez modifier cela en ajoutant un chemin \u00e0 la fin de la commande, comme suit : git clone https://github.com/Tsodinq/cosmic.git my-project Installez les d\u00e9pendances : cd cosmic # ou ce que vous avez nomm\u00e9 le r\u00e9pertoire yarn install # vous devrez installer yarn \u00e0 l'aide de npm si vous ne l'avez pas d\u00e9j\u00e0 - utilisez `npm install -g yarn` Configurez le serveur : Vous aurez besoin d'une cl\u00e9 API Nucleus pour permettre au serveur de communiquer avec l'API Nucleus. Pour obtenir une cl\u00e9, vous devrez cr\u00e9er une connexion sur Framework. Vous pouvez le faire ici . Une fois que vous avez cr\u00e9\u00e9 une connexion, acc\u00e9dez \u00e0 Invent -> Nucleus et copiez la cl\u00e9 API correspondante pour la connexion que vous avez cr\u00e9\u00e9e ( lien rapide ). Maintenant, cr\u00e9ez un fichier appel\u00e9 .env \u00e0 la racine du projet et ajoutez la ligne suivante \u00e0 celui-ci: NUCLEUS_KEY=your-api-key-here Ensuite, nous allons configurer la base de donn\u00e9es. Cosmic utilise Prisma en tant que ORM. Cosmic utilise PostgreSQL en tant que base de donn\u00e9es, vous devrez donc \u00e9galement l'installer. Une fois que vous avez install\u00e9 PostgreSQL et r\u00e9cup\u00e9r\u00e9 vos informations de connexion de base de donn\u00e9es, collez cette ligne dans votre .env et remplacez les valeurs par les v\u00f4tres: DATABASE_URL=postgresql://{username}:{password}@localhost:5432/cosmic Ex\u00e9cuter le serveur: yarn build yarn start Si tout s'est bien d\u00e9roul\u00e9, vous devriez voir cette sortie: Bon travail ! Vous avez correctement configur\u00e9 Cosmic. Vous devriez voir votre serveur figurant en tant que \"En ligne\" dans votre liste de serveurs de jeux. Conseils Fermeture du serveur Pour fermer le serveur, utilisez la commande exit dans la invite de commandes int\u00e9gr\u00e9e. Cela fermera le serveur et ex\u00e9cutera les t\u00e2ches de sortie n\u00e9cessaires. Si vous fermez le serveur en utilisant Ctrl+C , des probl\u00e8mes peuvent survenir. Ex\u00e9cution du serveur en arri\u00e8re-plan Vous pouvez utiliser un outil tel que PM2 pour ex\u00e9cuter le serveur en arri\u00e8re-plan. Cela est utile si vous souhaitez fermer votre terminal et laisser le serveur en cours d'ex\u00e9cution, et avoir une mani\u00e8re simple de g\u00e9rer le serveur, telle que le red\u00e9marrer, afficher les journaux, etc. Configurez Cosmic avec pm2 en ex\u00e9cutant la commande suivante: pm2 start yarn --name \"cosmic\" --interpreter bash -- start Cosmic devrait maintenant \u00eatre en cours d'ex\u00e9cution en arri\u00e8re-plan. Vous pouvez afficher les journaux en ex\u00e9cutant pm2 logs cosmic et red\u00e9marrer le serveur en ex\u00e9cutant pm2 restart cosmic .","title":"Introduction"},{"location":"fr/cosmic-server/introduction/#cosmic","text":"Cosmic est un serveur auto-h\u00e9berg\u00e9 pour les jeux sur Framework. Il est \u00e9crit en TypeScript et est construit avec les technologies suivantes : TypeScript - Un sur-ensemble de JavaScript qui ajoute des types statiques et d'autres fonctionnalit\u00e9s. Node.js - Un runtime JavaScript qui vous permet d'ex\u00e9cuter du JavaScript en dehors d'un navigateur. Express - Un cadre pour construire des applications web dans Node.js. Socket.io - Une biblioth\u00e8que pour la communication bidirectionnelle et bas\u00e9e sur des \u00e9v\u00e9nements en temps r\u00e9el entre le serveur et le client.","title":"Cosmic"},{"location":"fr/cosmic-server/introduction/#demarrage","text":"","title":"D\u00e9marrage"},{"location":"fr/cosmic-server/introduction/#prerequis","text":"Vous aurez besoin des choses suivantes install\u00e9es sur votre ordinateur : Node.js Yarn Git","title":"Pr\u00e9requis"},{"location":"fr/cosmic-server/introduction/#installation","text":"R\u00e9cup\u00e9rez le code source de GitHub : git clone https://github.com/Tsodinq/cosmic.git Cela cr\u00e9era un nouveau r\u00e9pertoire appel\u00e9 cosmic dans votre r\u00e9pertoire actuel. Vous pouvez modifier cela en ajoutant un chemin \u00e0 la fin de la commande, comme suit : git clone https://github.com/Tsodinq/cosmic.git my-project Installez les d\u00e9pendances : cd cosmic # ou ce que vous avez nomm\u00e9 le r\u00e9pertoire yarn install # vous devrez installer yarn \u00e0 l'aide de npm si vous ne l'avez pas d\u00e9j\u00e0 - utilisez `npm install -g yarn` Configurez le serveur : Vous aurez besoin d'une cl\u00e9 API Nucleus pour permettre au serveur de communiquer avec l'API Nucleus. Pour obtenir une cl\u00e9, vous devrez cr\u00e9er une connexion sur Framework. Vous pouvez le faire ici . Une fois que vous avez cr\u00e9\u00e9 une connexion, acc\u00e9dez \u00e0 Invent -> Nucleus et copiez la cl\u00e9 API correspondante pour la connexion que vous avez cr\u00e9\u00e9e ( lien rapide ). Maintenant, cr\u00e9ez un fichier appel\u00e9 .env \u00e0 la racine du projet et ajoutez la ligne suivante \u00e0 celui-ci: NUCLEUS_KEY=your-api-key-here Ensuite, nous allons configurer la base de donn\u00e9es. Cosmic utilise Prisma en tant que ORM. Cosmic utilise PostgreSQL en tant que base de donn\u00e9es, vous devrez donc \u00e9galement l'installer. Une fois que vous avez install\u00e9 PostgreSQL et r\u00e9cup\u00e9r\u00e9 vos informations de connexion de base de donn\u00e9es, collez cette ligne dans votre .env et remplacez les valeurs par les v\u00f4tres: DATABASE_URL=postgresql://{username}:{password}@localhost:5432/cosmic Ex\u00e9cuter le serveur: yarn build yarn start Si tout s'est bien d\u00e9roul\u00e9, vous devriez voir cette sortie: Bon travail ! Vous avez correctement configur\u00e9 Cosmic. Vous devriez voir votre serveur figurant en tant que \"En ligne\" dans votre liste de serveurs de jeux.","title":"Installation"},{"location":"fr/cosmic-server/introduction/#conseils","text":"","title":"Conseils"},{"location":"fr/cosmic-server/introduction/#fermeture-du-serveur","text":"Pour fermer le serveur, utilisez la commande exit dans la invite de commandes int\u00e9gr\u00e9e. Cela fermera le serveur et ex\u00e9cutera les t\u00e2ches de sortie n\u00e9cessaires. Si vous fermez le serveur en utilisant Ctrl+C , des probl\u00e8mes peuvent survenir.","title":"Fermeture du serveur"},{"location":"fr/cosmic-server/introduction/#execution-du-serveur-en-arriere-plan","text":"Vous pouvez utiliser un outil tel que PM2 pour ex\u00e9cuter le serveur en arri\u00e8re-plan. Cela est utile si vous souhaitez fermer votre terminal et laisser le serveur en cours d'ex\u00e9cution, et avoir une mani\u00e8re simple de g\u00e9rer le serveur, telle que le red\u00e9marrer, afficher les journaux, etc. Configurez Cosmic avec pm2 en ex\u00e9cutant la commande suivante: pm2 start yarn --name \"cosmic\" --interpreter bash -- start Cosmic devrait maintenant \u00eatre en cours d'ex\u00e9cution en arri\u00e8re-plan. Vous pouvez afficher les journaux en ex\u00e9cutant pm2 logs cosmic et red\u00e9marrer le serveur en ex\u00e9cutant pm2 restart cosmic .","title":"Ex\u00e9cution du serveur en arri\u00e8re-plan"},{"location":"fr/cosmic-server/typescript-api/using-typescript-in-cosmic/","text":"Utiliser TypeScript dans Cosmic Cosmic est \u00e9crit en TypeScript et nous vous encourageons \u00e0 utiliser TypeScript dans vos projets Cosmic. Ce guide vous aidera \u00e0 vous lancer. Commencer Si vous avez r\u00e9ussi \u00e0 mettre en marche votre serveur Cosmic, vous devriez d\u00e9j\u00e0 avoir tout ce dont vous avez besoin pour construire votre jeu en TypeScript. Tous les scripts de jeu sont stock\u00e9s dans le r\u00e9pertoire src/scripts . Cosmic, par d\u00e9faut, parcourt r\u00e9cursivement les r\u00e9pertoires et les fichiers dans le r\u00e9pertoire src/scripts et les charge en tant que scripts de jeu. Cela signifie que vous pouvez organiser vos scripts comme vous le souhaitez. Apprendre TypeScript TypeScript est un sur-ensemble de JavaScript qui ajoute un typage statique et d'autres fonctionnalit\u00e9s utiles. Si vous \u00eates nouveau sur TypeScript, nous vous recommandons de lire le TypeScript Handbook pour en apprendre les bases. Si vous \u00eates d\u00e9j\u00e0 familier avec JavaScript, apprendre TypeScript sera un jeu d'enfant. Le TypeScript Handbook est une excellente ressource pour apprendre les diff\u00e9rences entre JavaScript et TypeScript. \u00c9crire des scripts Nous vous recommandons d'utiliser Visual Studio Code pour programmer en TypeScript car il offre un excellent support pour l'\u00e9cosyst\u00e8me TypeScript/JavaScript. VSCode dispose \u00e9galement de nombreuses extensions utiles et de fonctionnalit\u00e9s int\u00e9gr\u00e9es qui faciliteront votre vie, telles que : ESLint - Linting Prettier - Formatage de code Intellisense - Compl\u00e9tion de code ...et ainsi de suite Exemple de script Commen\u00e7ons par cr\u00e9er un script simple qui affichera un message dans la console lorsqu'un joueur se connecte au serveur. src/scripts/events.ts Game . on ( \"playerConnected\" , async ( player : Types.Player ) => { // (1) console . log ( `Player ${ player . username } connected!` ); // (2) }); La m\u00e9thode Game.on est utilis\u00e9e pour enregistrer un gestionnaire d'\u00e9v\u00e9nements. Le premier La m\u00e9thode console.log est utilis\u00e9e pour afficher un message dans la console. L'objet console est un objet global qui est disponible dans tous les scripts. Ici, nous imprimons le nom du joueur qui s'est connect\u00e9. Linting Le code source de Cosmic est lint\u00e9 en utilisant ESLint . Vous pouvez \u00e9tendre notre configuration dans le fichier .eslintrc.json \u00e0 la racine de votre r\u00e9pertoire de serveur Cosmic. Apprenez-en plus sur la configuration de ESLint .","title":"Using TypeScript in Cosmic"},{"location":"fr/cosmic-server/typescript-api/using-typescript-in-cosmic/#utiliser-typescript-dans-cosmic","text":"Cosmic est \u00e9crit en TypeScript et nous vous encourageons \u00e0 utiliser TypeScript dans vos projets Cosmic. Ce guide vous aidera \u00e0 vous lancer.","title":"Utiliser TypeScript dans Cosmic"},{"location":"fr/cosmic-server/typescript-api/using-typescript-in-cosmic/#commencer","text":"Si vous avez r\u00e9ussi \u00e0 mettre en marche votre serveur Cosmic, vous devriez d\u00e9j\u00e0 avoir tout ce dont vous avez besoin pour construire votre jeu en TypeScript. Tous les scripts de jeu sont stock\u00e9s dans le r\u00e9pertoire src/scripts . Cosmic, par d\u00e9faut, parcourt r\u00e9cursivement les r\u00e9pertoires et les fichiers dans le r\u00e9pertoire src/scripts et les charge en tant que scripts de jeu. Cela signifie que vous pouvez organiser vos scripts comme vous le souhaitez.","title":"Commencer"},{"location":"fr/cosmic-server/typescript-api/using-typescript-in-cosmic/#apprendre-typescript","text":"TypeScript est un sur-ensemble de JavaScript qui ajoute un typage statique et d'autres fonctionnalit\u00e9s utiles. Si vous \u00eates nouveau sur TypeScript, nous vous recommandons de lire le TypeScript Handbook pour en apprendre les bases. Si vous \u00eates d\u00e9j\u00e0 familier avec JavaScript, apprendre TypeScript sera un jeu d'enfant. Le TypeScript Handbook est une excellente ressource pour apprendre les diff\u00e9rences entre JavaScript et TypeScript.","title":"Apprendre TypeScript"},{"location":"fr/cosmic-server/typescript-api/using-typescript-in-cosmic/#ecrire-des-scripts","text":"Nous vous recommandons d'utiliser Visual Studio Code pour programmer en TypeScript car il offre un excellent support pour l'\u00e9cosyst\u00e8me TypeScript/JavaScript. VSCode dispose \u00e9galement de nombreuses extensions utiles et de fonctionnalit\u00e9s int\u00e9gr\u00e9es qui faciliteront votre vie, telles que : ESLint - Linting Prettier - Formatage de code Intellisense - Compl\u00e9tion de code ...et ainsi de suite","title":"\u00c9crire des scripts"},{"location":"fr/cosmic-server/typescript-api/using-typescript-in-cosmic/#exemple-de-script","text":"Commen\u00e7ons par cr\u00e9er un script simple qui affichera un message dans la console lorsqu'un joueur se connecte au serveur. src/scripts/events.ts Game . on ( \"playerConnected\" , async ( player : Types.Player ) => { // (1) console . log ( `Player ${ player . username } connected!` ); // (2) }); La m\u00e9thode Game.on est utilis\u00e9e pour enregistrer un gestionnaire d'\u00e9v\u00e9nements. Le premier La m\u00e9thode console.log est utilis\u00e9e pour afficher un message dans la console. L'objet console est un objet global qui est disponible dans tous les scripts. Ici, nous imprimons le nom du joueur qui s'est connect\u00e9.","title":"Exemple de script"},{"location":"fr/cosmic-server/typescript-api/using-typescript-in-cosmic/#linting","text":"Le code source de Cosmic est lint\u00e9 en utilisant ESLint . Vous pouvez \u00e9tendre notre configuration dans le fichier .eslintrc.json \u00e0 la racine de votre r\u00e9pertoire de serveur Cosmic. Apprenez-en plus sur la configuration de ESLint .","title":"Linting"},{"location":"fr/support/changing-your-email/","text":"Pour changer votre email sur Framework, rendez-vous dans les Param\u00e8tres , allez dans l'onglet S\u00e9curit\u00e9 et cliquez sur Modifier l'email sous le groupe Email . Vous serez invit\u00e9 \u00e0 entrer votre nouvel email et recevrez un email pour v\u00e9rifier votre nouvelle adresse email.","title":"Changing your email address"},{"location":"fr/support/resetting-your-password/","text":"Pour r\u00e9initialiser votre mot de passe sur Framework, rendez-vous dans les Param\u00e8tres , allez dans l'onglet S\u00e9curit\u00e9 et cliquez sur Modifier le mot de passe sous le groupe Mot de passe . Notez que vous devrez conna\u00eetre votre mot de passe actuel pour le modifier.","title":"Resetting your password"},{"location":"nl/","text":"Framework Wiki Welkom bij de Framework Wiki! Dit is een verzameling documentatie voor Framework en zijn gerelateerde projecten, zoals Soodam.re Cloud en meer. Deze wiki is een werk in uitvoering en zal worden bijgewerkt naarmate er nieuwe functies aan Framework worden toegevoegd. Wat is Framework? Framework is een gratis (zoals in vrijheid en zoals in gratis bier), open-source, gefedereerd en gedecentraliseerd Roblox alternatief. Ons doel is om een veilige, beveiligde en leuke omgeving te bieden voor alle gebruikers door een platform te bieden dat vrij is van censuur en massa-moderatie. Ons doelpubliek zijn mensen die bezorgd zijn om hun privacy en veiligheid en mensen die zich vrij willen kunnen uiten zonder bang te zijn om verbannen of gecensureerd te worden. Framework biedt veel functies die niet beschikbaar zijn op Roblox, zoals: Een gefedereerd netwerk van servers, waardoor je verbinding kunt maken met elke server die je wilt en afhankelijkheid van een enkele, door een bedrijf beheerde server kunt verminderen. Een gedecentraliseerd moderatiesysteem, waardoor je je eigen server kunt modereren en kunt beslissen wie verbannen wordt en wie niet dat gemakkelijk kan worden gerepliceerd op andere servers. De mogelijkheid om je eigen server te hosten, wat veel meer mogelijkheden biedt voor aanpassing, controle en zelfs prestaties. Een gemeenschap gericht op de eerste plaats, waarbij de gemeenschap in controle is over de richting van het project en de functies die worden toegevoegd in plaats van investeerders of nummers op werkbladen. Een focus op privacy en veiligheid, met end-to-end encryptie op vele plaatsen en een focus op het zorgen dat uw gegevens veilig en beveiligd zijn tegen nieuwsgierige blikken. (We zijn GDPR-conform en we houden ons niet aan Five-Eyes surveillance verzoeken.) Een focus op gebruikerservaring, met een schoon en simpel interface dat makkelijk te gebruiken en te begrijpen is. ...en nog veel, veel meer! Aansluiten bij Framework Momenteel is Framework in een gesloten alpha-testfase. Als je wilt deelnemen, kom dan naar onze Discord-server en neem contact op met een personeelslid. We helpen je graag op weg! Bijdragen Framework is volledig open source en we verwelkomen bijdragen van de gemeenschap. Als je wilt bijdragen, ga dan naar onze GitHub-repository en dien een pull request in. We zullen het beoordelen en zo snel mogelijk contact met je opnemen. Licentie Framework is gelicentieerd onder de MIT-licentie . U kunt de volledige licentietekst vinden in het bestand LICENSE in de repository. Gemaakt met <3 door Soodam.re en bijdragers.","title":"Home"},{"location":"nl/#framework-wiki","text":"Welkom bij de Framework Wiki! Dit is een verzameling documentatie voor Framework en zijn gerelateerde projecten, zoals Soodam.re Cloud en meer. Deze wiki is een werk in uitvoering en zal worden bijgewerkt naarmate er nieuwe functies aan Framework worden toegevoegd.","title":"Framework Wiki"},{"location":"nl/#wat-is-framework","text":"Framework is een gratis (zoals in vrijheid en zoals in gratis bier), open-source, gefedereerd en gedecentraliseerd Roblox alternatief. Ons doel is om een veilige, beveiligde en leuke omgeving te bieden voor alle gebruikers door een platform te bieden dat vrij is van censuur en massa-moderatie. Ons doelpubliek zijn mensen die bezorgd zijn om hun privacy en veiligheid en mensen die zich vrij willen kunnen uiten zonder bang te zijn om verbannen of gecensureerd te worden. Framework biedt veel functies die niet beschikbaar zijn op Roblox, zoals: Een gefedereerd netwerk van servers, waardoor je verbinding kunt maken met elke server die je wilt en afhankelijkheid van een enkele, door een bedrijf beheerde server kunt verminderen. Een gedecentraliseerd moderatiesysteem, waardoor je je eigen server kunt modereren en kunt beslissen wie verbannen wordt en wie niet dat gemakkelijk kan worden gerepliceerd op andere servers. De mogelijkheid om je eigen server te hosten, wat veel meer mogelijkheden biedt voor aanpassing, controle en zelfs prestaties. Een gemeenschap gericht op de eerste plaats, waarbij de gemeenschap in controle is over de richting van het project en de functies die worden toegevoegd in plaats van investeerders of nummers op werkbladen. Een focus op privacy en veiligheid, met end-to-end encryptie op vele plaatsen en een focus op het zorgen dat uw gegevens veilig en beveiligd zijn tegen nieuwsgierige blikken. (We zijn GDPR-conform en we houden ons niet aan Five-Eyes surveillance verzoeken.) Een focus op gebruikerservaring, met een schoon en simpel interface dat makkelijk te gebruiken en te begrijpen is. ...en nog veel, veel meer!","title":"Wat is Framework?"},{"location":"nl/#aansluiten-bij-framework","text":"Momenteel is Framework in een gesloten alpha-testfase. Als je wilt deelnemen, kom dan naar onze Discord-server en neem contact op met een personeelslid. We helpen je graag op weg!","title":"Aansluiten bij Framework"},{"location":"nl/#bijdragen","text":"Framework is volledig open source en we verwelkomen bijdragen van de gemeenschap. Als je wilt bijdragen, ga dan naar onze GitHub-repository en dien een pull request in. We zullen het beoordelen en zo snel mogelijk contact met je opnemen.","title":"Bijdragen"},{"location":"nl/#licentie","text":"Framework is gelicentieerd onder de MIT-licentie . U kunt de volledige licentietekst vinden in het bestand LICENSE in de repository. Gemaakt met <3 door Soodam.re en bijdragers.","title":"Licentie"},{"location":"nl/support/changing-your-email/","text":"Om uw e-mail op Framework te wijzigen, gaat u naar de Instellingen , gaat u naar het tabblad Beveiliging en klikt u onder de groep E-mail op E-mail wijzigen . U wordt gevraagd om uw nieuwe e-mailadres in te voeren en ontvangt een e-mail om uw nieuwe e-mailadres te verifi\u00ebren.","title":"Changing your email address"},{"location":"nl/support/resetting-your-password/","text":"Om uw wachtwoord op Framework te resetten, gaat u naar de Instellingen , gaat u naar het tabblad Beveiliging en klikt u onder de groep Wachtwoord op Wachtwoord wijzigen . Merk op dat u uw huidige wachtwoord moet kennen om het te wijzigen.","title":"Resetting your password"}]}